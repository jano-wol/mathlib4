/-
Copyright (c) 2025 Janos Wolosz. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Janos Wolosz
-/
import Mathlib.Algebra.Lie.Sl2
import Mathlib.Algebra.Lie.Weights.Basic
import Mathlib.Algebra.Lie.Weights.Cartan
import Mathlib.Algebra.Lie.Weights.Killing
import Mathlib.Algebra.Lie.Weights.RootSystem
import Mathlib.Algebra.Module.Submodule.Invariant
import Mathlib.Order.CompleteLattice.Basic
import Mathlib.LinearAlgebra.RootSystem.Finite.Lemmas

/-!
# Invariant submodule to Lie ideal construction

This file contains the construction of Lie ideals from invariant submodules of the dual space
of a Cartan subalgebra.

## Main definitions
* `invtSubmoduleToLieIdeal`: constructs a Lie ideal from an invariant submodule of the dual space

## Main results
* The constructed object is indeed a Lie ideal
-/

variable {K L : Type*} [Field K] [CharZero K] [LieRing L] [LieAlgebra K L]
variable [LieAlgebra.IsKilling K L] [FiniteDimensional K L]
variable {H : LieSubalgebra K L} [H.IsCartanSubalgebra] [LieModule.IsTriangularizable K H L]
open LieAlgebra LieModule Module
open IsKilling (sl2SubalgebraOfRoot rootSystem)


/-- The `sl₂` submodule associated to a root `α`.
This is the Lie submodule generated by the positive root space, negative root space,
and the coroot corresponding to `α`. -/
noncomputable def sl2SubmoduleOfRoot (α : Weight K H L) (hα : α.IsNonZero) :
    LieSubmodule K H L where
  __ := (sl2SubalgebraOfRoot hα).toLieSubmodule
  lie_mem := by
    intro h x hx
    have hx_sl2 : x ∈ sl2SubalgebraOfRoot hα := hx
    obtain ⟨h', e, f, ht, heα, hfα⟩ :=
      LieAlgebra.IsKilling.exists_isSl2Triple_of_weight_isNonZero hα
    rw [LieAlgebra.IsKilling.mem_sl2SubalgebraOfRoot_iff hα ht heα hfα] at hx_sl2
    obtain ⟨c₁, c₂, c₃, hx_eq⟩ := hx_sl2
    have h_bracket_sl2 : ⁅(h : L), x⁆ ∈ sl2SubalgebraOfRoot hα := by
      rw [LieAlgebra.IsKilling.mem_sl2SubalgebraOfRoot_iff hα ht heα hfα]
      rw [hx_eq, lie_add, lie_add, lie_smul, lie_smul, lie_smul]
      have he_wt : ⁅(h : L), e⁆ = α h • e :=
        LieAlgebra.IsKilling.lie_eq_smul_of_mem_rootSpace heα h
      have hf_wt : ⁅(h : L), f⁆ = (-α) h • f :=
        LieAlgebra.IsKilling.lie_eq_smul_of_mem_rootSpace hfα h
      have hef_zero : ⁅(h : L), ⁅e, f⁆⁆ = 0 := by
        have h_coroot_in_zero : ⁅e, f⁆ ∈ rootSpace H (0 : H → K) := by
          rw [ht.lie_e_f, IsSl2Triple.h_eq_coroot hα ht heα hfα]
          have : (LieAlgebra.IsKilling.coroot α : L) ∈ H := (LieAlgebra.IsKilling.coroot α).property
          rw [rootSpace_zero_eq K L H]
          exact this
        exact LieAlgebra.IsKilling.lie_eq_smul_of_mem_rootSpace h_coroot_in_zero h ▸
          (zero_smul K ⁅e, f⁆)
      rw [he_wt, hf_wt, hef_zero, smul_smul, smul_smul, smul_zero, add_zero]
      exact ⟨c₁ * α h, c₂ * (-α h), 0, by simp [mul_smul]⟩
    exact h_bracket_sl2

/-- The coroot space of `α` viewed as a submodule of the ambient Lie algebra `L`.
This represents the image of the coroot space under the inclusion `H ↪ L`. -/
noncomputable abbrev corootSubmodule (α : Weight K H L) : LieSubmodule K H L :=
  LieSubmodule.map H.toLieSubmodule.incl (LieAlgebra.corootSpace α.toLinear)

lemma sl2SubmoduleOfRoot_eq_sup (α : Weight K H L) (hα : α.IsNonZero) :
    sl2SubmoduleOfRoot α hα =
    genWeightSpace L α.toLinear ⊔ genWeightSpace L (-α).toLinear ⊔ corootSubmodule α := by
  ext x
  obtain ⟨h', e, f, ht, heα, hfα⟩ := LieAlgebra.IsKilling.exists_isSl2Triple_of_weight_isNonZero hα
  constructor
  · intro hx
    have hx_sl2 : x ∈ sl2SubalgebraOfRoot hα := hx
    rw [LieAlgebra.IsKilling.mem_sl2SubalgebraOfRoot_iff hα ht heα hfα] at hx_sl2
    obtain ⟨c₁, c₂, c₃, rfl⟩ := hx_sl2
    apply add_mem (add_mem _ _) _
    · apply Submodule.mem_sup_left; apply Submodule.mem_sup_left
      exact Submodule.smul_mem _ _ heα
    · apply Submodule.mem_sup_left; apply Submodule.mem_sup_right
      exact Submodule.smul_mem _ _ hfα
    · apply Submodule.mem_sup_right
      rw [ht.lie_e_f]
      use c₃ • LieAlgebra.IsKilling.coroot α
      constructor
      · have h_span : (LieAlgebra.corootSpace α.toLinear).toSubmodule =
            K ∙ LieAlgebra.IsKilling.coroot α :=
          LieAlgebra.IsKilling.coe_corootSpace_eq_span_singleton α
        change c₃ • LieAlgebra.IsKilling.coroot α ∈ (LieAlgebra.corootSpace α.toLinear).toSubmodule
        rw [h_span]
        exact Submodule.smul_mem _ _ (Submodule.mem_span_singleton_self _)
      · rw [IsSl2Triple.h_eq_coroot hα ht heα hfα, map_smul]
        rfl
  · intro hx
    obtain ⟨x_αneg, hx_αneg, x_h, hx_h, hx_eq⟩ := Submodule.mem_sup.mp hx
    obtain ⟨x_pos, hx_pos, x_neg, hx_neg, hx_αneg_eq⟩ := Submodule.mem_sup.mp hx_αneg
    rw [← hx_eq, ← hx_αneg_eq]
    have aux : ∀ {β : Weight K H L} (hβ : β.IsNonZero) {y : L} {g : L}
        (hy : y ∈ genWeightSpace L β.toLinear) (hg : g ∈ rootSpace H β.toLinear)
        (hg_ne_zero : g ≠ 0), ∃ c : K, y = c • g := by
      intro β hβ y g hy hg hg_ne_zero
      have h_dim : Module.finrank K (rootSpace H β.toLinear) = 1 :=
        LieAlgebra.IsKilling.finrank_rootSpace_eq_one β hβ
      have hg_subtype_ne_zero : (⟨g, hg⟩ : rootSpace H β.toLinear) ≠ 0 := by
        rwa [ne_eq, LieSubmodule.mk_eq_zero]
      obtain ⟨c, hc⟩ := (finrank_eq_one_iff_of_nonzero' ⟨g, hg⟩ hg_subtype_ne_zero).mp h_dim ⟨y, hy⟩
      use c
      have : y = (⟨y, hy⟩ : rootSpace H β.toLinear).val := rfl
      rw [this, ← hc];
      simp only [Weight.coe_coe, SetLike.mk_smul_mk]
    obtain ⟨c₁, hx_pos_eq⟩ := aux hα hx_pos heα ht.e_ne_zero
    obtain ⟨c₂, hx_neg_eq⟩ := aux (Weight.IsNonZero.neg hα) hx_neg hfα ht.f_ne_zero
    obtain ⟨y, hy_coroot, hy_eq⟩ := hx_h
    have h_coroot_span : (LieAlgebra.corootSpace α.toLinear).toSubmodule =
        K ∙ LieAlgebra.IsKilling.coroot α :=
      LieAlgebra.IsKilling.coe_corootSpace_eq_span_singleton α
    have hy_mem_submodule : y ∈ (LieAlgebra.corootSpace α.toLinear).toSubmodule := by
      rw [LieSubmodule.mem_toSubmodule]; exact hy_coroot
    rw [h_coroot_span] at hy_mem_submodule
    obtain ⟨c₃, hc₃⟩ := Submodule.mem_span_singleton.mp hy_mem_submodule
    have hx_final : x_pos + x_neg + x_h ∈ sl2SubalgebraOfRoot hα := by
      rw [LieAlgebra.IsKilling.mem_sl2SubalgebraOfRoot_iff hα ht heα hfα]
      use c₁, c₂, c₃
      rw [hx_pos_eq, hx_neg_eq]
      suffices h_x_h_eq : x_h = c₃ • ⁅e, f⁆ by
        rw [h_x_h_eq]
      rw [ht.lie_e_f, IsSl2Triple.h_eq_coroot hα ht heα hfα, ← hy_eq, ← hc₃]
      rfl
    exact hx_final

variable {H : LieSubalgebra K L} [H.IsCartanSubalgebra] [IsTriangularizable K H L]

/-- Helper lemma for proving weight space containment in supremum of sl2 submodules. -/
lemma genWeightSpace_le_iSup_sl2SubmoduleOfRoot
    (q : Submodule K (Dual K H)) (β_lin : H →ₗ[K] K) (hβ_in_q : β_lin ∈ q)
    (hβ_ne_zero : β_lin ≠ 0) :
    genWeightSpace L β_lin ≤
    ⨆ γ : {γ : Weight K H L // γ.toLinear ∈ q ∧ γ.IsNonZero},
      sl2SubmoduleOfRoot γ.1 γ.2.2 := by
  by_cases h_trivial : genWeightSpace L β_lin = ⊥
  · simp [h_trivial]
  · let β : Weight K H L := {
      toFun := β_lin,
      genWeightSpace_ne_bot' := h_trivial
    }
    have hβ_in_index_set : β.toLinear ∈ q ∧ β.IsNonZero := by
      constructor
      · exact hβ_in_q
      · intro h_eq
        apply hβ_ne_zero
        have h_zero_eq : (β.toLinear : H →ₗ[K] K) = 0 := by
          ext h
          simp [Weight.IsZero.eq h_eq]
        exact h_zero_eq
    let β_indexed : {γ : Weight K H L // γ.toLinear ∈ q ∧ γ.IsNonZero} :=
      ⟨β, hβ_in_index_set⟩
    have β_term_in_supr :
        sl2SubmoduleOfRoot β β_indexed.property.right ≤
        ⨆ (γ : {γ : Weight K H L // γ.toLinear ∈ q ∧ γ.IsNonZero}),
        sl2SubmoduleOfRoot γ.1 γ.2.2 := by
      exact le_iSup (fun γ : {γ : Weight K H L // γ.toLinear ∈ q ∧ γ.IsNonZero} =>
        sl2SubmoduleOfRoot γ.1 γ.2.2) β_indexed
    have h_β_contains : genWeightSpace L β_lin ≤
        sl2SubmoduleOfRoot β β_indexed.property.right := by
      rw [sl2SubmoduleOfRoot_eq_sup]
      apply le_sup_of_le_left
      apply le_sup_of_le_left
      rfl
    exact h_β_contains.trans β_term_in_supr

lemma exists_root_index (γ : Weight K H L) (hγ : γ.IsNonZero) :
    ∃ i, (LieAlgebra.IsKilling.rootSystem H).root i = γ.toLinear :=
  ⟨⟨γ, by simp [LieSubalgebra.root]; exact hγ⟩, rfl⟩


lemma pairing_zero_of_trivial_sum_diff_spaces
  (χ α : Weight K H L) (hχ : χ.IsNonZero) (hα : α.IsNonZero)
  (w_plus : χ.toLinear + α.toLinear ≠ 0) (w_minus : χ.toLinear - α.toLinear ≠ 0)
  (h_plus_bot : genWeightSpace L (χ.toLinear + α.toLinear) = ⊥)
  (h_minus_bot : genWeightSpace L (χ.toLinear - α.toLinear) = ⊥) :
  let S := LieAlgebra.IsKilling.rootSystem H
  ∃ (i j : { w : Weight K H L // w ∈ H.root }),
    S.root i = χ.toLinear ∧ S.root j = α.toLinear ∧ S.pairing i j = 0 := by
  let S := LieAlgebra.IsKilling.rootSystem H
  let i : { w : Weight K H L // w ∈ H.root } := ⟨χ, by simp [LieSubalgebra.root]; exact hχ⟩
  let j : { w : Weight K H L // w ∈ H.root } := ⟨α, by simp [LieSubalgebra.root]; exact hα⟩
  use i, j, rfl, rfl
  have h_c (β γ : H →ₗ[K] K) (h_bot : genWeightSpace L β = ⊥)
      (idx : { w : Weight K H L // w ∈ H.root }) (h_eq : S.root idx = γ) (h_beta_eq : β = γ) :
      False := by
    have h_nontrivial : genWeightSpace L β ≠ ⊥ := by
      rw [h_beta_eq, ← h_eq, LieAlgebra.IsKilling.rootSystem_root_apply H idx]
      exact idx.val.genWeightSpace_ne_bot
    exact h_nontrivial h_bot
  cases lt_trichotomy (S.pairingIn ℤ i j) 0 with
  | inl h_neg =>
    exfalso
    have h_add_mem : S.root i + S.root j ∈ Set.range S.root := by
      apply RootPairing.root_add_root_mem_of_pairingIn_neg S.toRootPairing h_neg
      intro h_eq
      have h_sum_zero : S.root i + S.root j = 0 := by rw [h_eq]; simp
      exact w_plus h_sum_zero
    obtain ⟨idx, hidx⟩ := h_add_mem
    exact h_c (χ.toLinear + α.toLinear) (S.root i + S.root j) h_plus_bot idx hidx rfl
  | inr h_rest =>
    cases h_rest with
    | inl h_zero => exact (S.algebraMap_pairingIn ℤ i j ▸ by simp [h_zero])
    | inr h_pos =>
      exfalso
      have h_sub_mem : S.root i - S.root j ∈ Set.range S.root := by
        apply RootPairing.root_sub_root_mem_of_pairingIn_pos S.toRootPairing h_pos
        intro h_eq
        have h_chi_eq_alpha : χ = α := by injection h_eq
        exact w_minus (by rw [h_chi_eq_alpha]; simp)
      obtain ⟨idx, hidx⟩ := h_sub_mem
      exact h_c (χ.toLinear - α.toLinear) (S.root i - S.root j) h_minus_bot idx hidx rfl

set_option maxHeartbeats 1000000 in
-- The proof involves extensive case analysis.
/-- Constructs a Lie ideal from an invariant submodule of the dual space of a Cartan subalgebra.
Given a submodule `q` of the dual space `Dual K H` that is invariant under all root reflections,
this produces a Lie ideal by taking the supremum of all `sl₂` subalgebras corresponding to
roots whose linear forms lie in `q`. -/
noncomputable def invtSubmoduleToLieIdeal (q : Submodule K (Dual K H))
    (hq : ∀ i, q ∈ End.invtSubmodule ((rootSystem H).reflection i)) :
    LieIdeal K L where
    __ := ⨆ α : {α : Weight K H L // α.toLinear ∈ q ∧ α.IsNonZero},
      sl2SubmoduleOfRoot α.1 α.2.2
    lie_mem := by
      intro x m hm
      have hx : x ∈ ⨆ χ : Weight K H L, genWeightSpace L χ := by
        simp [LieModule.iSup_genWeightSpace_eq_top']
      induction hx using LieSubmodule.iSup_induction' with
      | mem χ x_χ hx_χ =>
        induction hm using LieSubmodule.iSup_induction' with
        | mem α m_α hm_α =>
          have hm_α_original : m_α ∈ sl2SubmoduleOfRoot α.1 α.2.2 := hm_α
          rw [sl2SubmoduleOfRoot_eq_sup] at hm_α
          obtain ⟨m_αneg, hm_αneg, m_h, hm_h, hm_eq⟩ := Submodule.mem_sup.mp hm_α
          obtain ⟨m_pos, hm_pos, m_neg, hm_neg, hm_αneg_eq⟩ := Submodule.mem_sup.mp hm_αneg

          have hm_α_decomp : m_α = m_pos + m_neg + m_h := by
            rw [← hm_eq, ← hm_αneg_eq]

          have h_bracket_sum : ⁅x_χ, m_α⁆ = ⁅x_χ, m_pos⁆ + ⁅x_χ, m_neg⁆ + ⁅x_χ, m_h⁆ := by
            rw [hm_α_decomp, lie_add, lie_add]

          have h_pos_containment : ⁅x_χ, m_pos⁆ ∈ genWeightSpace L (χ.toLinear + α.1.toLinear) := by
            exact LieAlgebra.lie_mem_genWeightSpace_of_mem_genWeightSpace hx_χ hm_pos

          have h_neg_containment : ⁅x_χ, m_neg⁆ ∈ genWeightSpace L (χ.toLinear - α.1.toLinear) := by
            rw [sub_eq_add_neg]
            exact LieAlgebra.lie_mem_genWeightSpace_of_mem_genWeightSpace hx_χ hm_neg

          have h_h_containment : ⁅x_χ, m_h⁆ ∈ genWeightSpace L χ := by
            obtain ⟨y, hy, rfl⟩ := hm_h
            have h_zero_weight : H.toLieSubmodule.incl y ∈ genWeightSpace L (0 : H → K) := by
              apply LieAlgebra.toLieSubmodule_le_rootSpace_zero
              exact y.property
            convert LieAlgebra.lie_mem_genWeightSpace_of_mem_genWeightSpace hx_χ h_zero_weight
            ext h; simp

          have h_bracket_decomp : ⁅x_χ, m_α⁆ ∈
            genWeightSpace L (χ.toLinear + α.1.toLinear) ⊔
            genWeightSpace L (χ.toLinear - α.1.toLinear) ⊔
            genWeightSpace L χ := by
            rw [h_bracket_sum]
            exact add_mem (add_mem
              (Submodule.mem_sup_left (Submodule.mem_sup_left h_pos_containment))
              (Submodule.mem_sup_left (Submodule.mem_sup_right h_neg_containment)))
              (Submodule.mem_sup_right h_h_containment)

          by_cases w_plus : χ.toLinear + α.1.toLinear = 0
          · have h_chi_neg_alpha : χ.toLinear = -α.1.toLinear :=
              add_eq_zero_iff_eq_neg.mp w_plus
            apply LieSubmodule.mem_iSup_of_mem α
            have hx_χ_in_sl2 : x_χ ∈ sl2SubalgebraOfRoot α.2.2 := by
              obtain ⟨h, e, f, ht, heα, hfα⟩ :=
                LieAlgebra.IsKilling.exists_isSl2Triple_of_weight_isNonZero α.2.2
              rw [LieAlgebra.IsKilling.mem_sl2SubalgebraOfRoot_iff α.2.2 ht heα hfα]
              have hx_χ_neg : x_χ ∈ genWeightSpace L (-α.1.toLinear) := by
                rwa [← h_chi_neg_alpha]
              obtain ⟨c, hc⟩ :=
                (finrank_eq_one_iff_of_nonzero' ⟨f, hfα⟩ (by simp [ht.f_ne_zero])).mp
                (LieAlgebra.IsKilling.finrank_rootSpace_eq_one (-α.1) (by simpa using α.2.2))
                ⟨x_χ, hx_χ_neg⟩
              exact ⟨0, c, 0, by simpa using hc.symm⟩
            apply LieSubalgebra.lie_mem <;> [exact hx_χ_in_sl2; exact hm_α_original]
          by_cases w_minus : χ.toLinear - α.1.toLinear = 0
          · have h_chi_eq_alpha : χ.toLinear = α.1.toLinear := sub_eq_zero.mp w_minus
            apply LieSubmodule.mem_iSup_of_mem α
            have hx_χ_in_sl2 : x_χ ∈ sl2SubalgebraOfRoot α.2.2 := by
              obtain ⟨h, e, f, ht, heα, hfα⟩ :=
                LieAlgebra.IsKilling.exists_isSl2Triple_of_weight_isNonZero α.2.2
              rw [LieAlgebra.IsKilling.mem_sl2SubalgebraOfRoot_iff α.2.2 ht heα hfα]
              have hx_χ_pos : x_χ ∈ genWeightSpace L α.1.toLinear := by
                rwa [← h_chi_eq_alpha]
              obtain ⟨c, hc⟩ :=
                (finrank_eq_one_iff_of_nonzero' ⟨e, heα⟩ (by simp [ht.e_ne_zero])).mp
                (LieAlgebra.IsKilling.finrank_rootSpace_eq_one α.1 α.2.2)
                ⟨x_χ, hx_χ_pos⟩
              exact ⟨c, 0, 0, by simpa using hc.symm⟩
            apply LieSubalgebra.lie_mem <;> [exact hx_χ_in_sl2; exact hm_α_original]
          by_cases w_chi : χ.toLinear = 0
          · have hx_χ_in_H : x_χ ∈ H.toLieSubmodule := by
              rw [← rootSpace_zero_eq K L H]
              convert hx_χ; ext h; simp only [Pi.zero_apply]
              have h_apply : (χ.toLinear : H → K) h = 0 := by rw [w_chi]; rfl
              exact h_apply.symm
            apply LieSubmodule.mem_iSup_of_mem α
            simp only [sl2SubmoduleOfRoot]
            rw [← (by rfl : ⁅(⟨x_χ, hx_χ_in_H⟩ : H), m_α⁆ = ⁅x_χ, m_α⁆)]
            exact (sl2SubmoduleOfRoot α.1 α.2.2).lie_mem hm_α_original

          have hχ_nonzero : χ.IsNonZero := by
            intro h_zero
            apply w_chi
            have h_zero_eq : (χ.toLinear : H →ₗ[K] K) = 0 := by
              ext h
              simp [Weight.IsZero.eq h_zero]
            exact h_zero_eq

          let I := ⨆ β : {β : Weight K H L // β.toLinear ∈ q ∧ β.IsNonZero},
            sl2SubmoduleOfRoot β.1 β.2.2
          by_cases h_chi_in_q : χ.toLinear ∈ q
          · have h_plus_contain : genWeightSpace L (χ.toLinear + α.1.toLinear) ≤ I := by
              apply genWeightSpace_le_iSup_sl2SubmoduleOfRoot q
              · exact q.add_mem h_chi_in_q α.2.1
              · exact w_plus
            have h_minus_contain : genWeightSpace L (χ.toLinear - α.1.toLinear) ≤ I := by
              apply genWeightSpace_le_iSup_sl2SubmoduleOfRoot q
              · have : -α.1.toLinear = (-1 : K) • α.1.toLinear := by simp
                rw [sub_eq_add_neg, this]; exact q.add_mem h_chi_in_q (q.smul_mem (-1) α.2.1)
              · exact w_minus
            have h_chi_contain : genWeightSpace L χ.toLinear ≤ I := by
              apply genWeightSpace_le_iSup_sl2SubmoduleOfRoot q
              · exact h_chi_in_q
              · intro h_eq; exfalso; apply w_chi; exact h_eq
            exact sup_le (sup_le h_plus_contain h_minus_contain) h_chi_contain h_bracket_decomp
          · have h_plus_bot : genWeightSpace L (χ.toLinear + α.1.toLinear) = ⊥ := by
              by_contra h_plus_ne_bot
              let S := LieAlgebra.IsKilling.rootSystem H
              have q_invt : q ∈ S.invtRootSubmodule := by
                rw [RootPairing.mem_invtRootSubmodule_iff]
                exact hq
              have h_chi_plus_alpha_is_root : χ.toLinear + α.1.toLinear ∈ Set.range S.root := by
                let γ : Weight K H L := {
                  toFun := χ.toLinear + α.1.toLinear,
                  genWeightSpace_ne_bot' := h_plus_ne_bot
                }
                have hγ_nonzero : γ.IsNonZero := by
                  intro h_zero
                  apply w_plus
                  have h_zero_eq : (γ.toLinear : H →ₗ[K] K) = 0 := by
                    ext h
                    simp [Weight.IsZero.eq h_zero]
                  have h_def : γ.toLinear = χ.toLinear + α.1.toLinear := rfl
                  rw [h_def] at h_zero_eq
                  exact h_zero_eq
                have γ_in_root : γ ∈ H.root := by
                  simp [LieSubalgebra.root]
                  exact hγ_nonzero
                use ⟨γ, γ_in_root⟩
                rfl
              obtain ⟨i, hi⟩ := exists_root_index χ hχ_nonzero
              obtain ⟨j, hj⟩ := exists_root_index α.1 α.2.2
              have h_sum_in_range : S.root i + S.root j ∈ Set.range S.root := by
                rw [hi, hj]
                exact h_chi_plus_alpha_is_root
              let q_as_invt : S.invtRootSubmodule := ⟨q, q_invt⟩
              have h_equiv : S.root i ∈ (q_as_invt : Submodule K (Dual K H)) ↔
                            S.root j ∈ (q_as_invt : Submodule K (Dual K H)) :=
                RootPairing.root_mem_submodule_iff_of_add_mem_invtSubmodule q_as_invt h_sum_in_range
              have h_j_in_q : S.root j ∈ (q_as_invt : Submodule K (Dual K H)) := by
                rw [hj]
                exact α.2.1
              have h_i_in_q : S.root i ∈ (q_as_invt : Submodule K (Dual K H)) :=
                h_equiv.mpr h_j_in_q
              rw [hi] at h_i_in_q
              exact h_chi_in_q h_i_in_q

            have h_minus_bot : genWeightSpace L (χ.toLinear - α.1.toLinear) = ⊥ := by
              by_contra h_minus_ne_bot
              let S := LieAlgebra.IsKilling.rootSystem H
              have q_invt : q ∈ S.invtRootSubmodule := by
                rw [RootPairing.mem_invtRootSubmodule_iff]
                exact hq
              have h_chi_minus_alpha_is_root : χ.toLinear - α.1.toLinear ∈ Set.range S.root := by
                let γ : Weight K H L := {
                  toFun := χ.toLinear - α.1.toLinear,
                  genWeightSpace_ne_bot' := h_minus_ne_bot
                }
                have hγ_nonzero : γ.IsNonZero := by
                  intro h_zero
                  apply w_minus
                  have h_zero_eq : (γ.toLinear : H →ₗ[K] K) = 0 := by
                    ext h
                    simp [Weight.IsZero.eq h_zero]
                  have h_def : γ.toLinear = χ.toLinear - α.1.toLinear := rfl
                  rw [h_def] at h_zero_eq
                  exact h_zero_eq
                have γ_in_root : γ ∈ H.root := by
                  simp [LieSubalgebra.root]
                  exact hγ_nonzero
                use ⟨γ, γ_in_root⟩
                rfl
              obtain ⟨i, hi⟩ := exists_root_index χ hχ_nonzero
              obtain ⟨j, hj⟩ := exists_root_index (-α.1) (Weight.IsNonZero.neg α.2.2)
              have h_sum_in_range : S.root i + S.root j ∈ Set.range S.root := by
                rw [hi, hj]
                have h_eq : χ.toLinear + (-α.1).toLinear = χ.toLinear - α.1.toLinear := by
                  simp only [sub_eq_add_neg]
                  congr 1
                rw [h_eq]
                exact h_chi_minus_alpha_is_root
              let q_as_invt : S.invtRootSubmodule := ⟨q, q_invt⟩
              have h_equiv : S.root i ∈ (q_as_invt : Submodule K (Dual K H)) ↔
                            S.root j ∈ (q_as_invt : Submodule K (Dual K H)) :=
                RootPairing.root_mem_submodule_iff_of_add_mem_invtSubmodule q_as_invt h_sum_in_range
              have h_j_in_q : S.root j ∈ (q_as_invt : Submodule K (Dual K H)) := by
                rw [hj]
                have h_neg_smul : (-α.1).toLinear = (-1 : K) • α.1.toLinear := by
                  simp only [Weight.toLinear_neg, neg_smul, one_smul]
                rw [h_neg_smul]
                exact q.smul_mem (-1) α.2.1
              have h_i_in_q : S.root i ∈ (q_as_invt : Submodule K (Dual K H)) :=
                h_equiv.mpr h_j_in_q
              rw [hi] at h_i_in_q
              exact h_chi_in_q h_i_in_q

            have h_pos_zero : ⁅x_χ, m_pos⁆ = 0 := by
              have h_in_bot : ⁅x_χ, m_pos⁆ ∈ (⊥ : LieSubmodule K H L) := by
                rw [← h_plus_bot]
                exact h_pos_containment
              rwa [LieSubmodule.mem_bot] at h_in_bot

            have h_neg_zero : ⁅x_χ, m_neg⁆ = 0 := by
              have h_in_bot : ⁅x_χ, m_neg⁆ ∈ (⊥ : LieSubmodule K H L) := by
                rw [← h_minus_bot]
                exact h_neg_containment
              rwa [LieSubmodule.mem_bot] at h_in_bot

            have h_simplified : ⁅x_χ, m_α⁆ = ⁅x_χ, m_h⁆ := by
              rw [h_bracket_sum, h_pos_zero, h_neg_zero]
              simp

            let S := LieAlgebra.IsKilling.rootSystem H
            obtain ⟨i, hi⟩ := exists_root_index χ hχ_nonzero
            obtain ⟨j, hj⟩ := exists_root_index α.1 α.2.2
            have h_pairing_zero : S.pairing i j = 0 := by
              obtain ⟨i', j', hi', hj', h_zero⟩ :=
                pairing_zero_of_trivial_sum_diff_spaces χ α.1 hχ_nonzero α.2.2 w_plus
                  w_minus h_plus_bot h_minus_bot
              have h_i_eq : i = i' := by
                have h_root_eq : S.root i = S.root i' := by
                  rw [hi, hi']
                exact Function.Embedding.injective S.root h_root_eq
              have h_j_eq : j = j' := by
                have h_root_eq : S.root j = S.root j' := by
                  rw [hj, hj']
                exact Function.Embedding.injective S.root h_root_eq
              rw [h_i_eq, h_j_eq]
              exact h_zero

            have h_bracket_zero : ⁅x_χ, m_h⁆ = 0 := by
              have h_chi_coroot_zero : χ (LieAlgebra.IsKilling.coroot α.1) = 0 := by
                have h_pairing_eq : S.pairing i j = i.1 (LieAlgebra.IsKilling.coroot j.1) := by
                  rw [LieAlgebra.IsKilling.rootSystem_pairing_apply]
                rw [h_pairing_zero] at h_pairing_eq
                have hi_val : i.1 = χ := by
                  have h_eq : i.1.toLinear = χ.toLinear := by
                    rw [← hi]
                    rfl
                  apply Weight.ext
                  intro x
                  have := LinearMap.ext_iff.mp h_eq x
                  exact this
                have hj_val : j.1 = α.1 := by
                  have h_eq : j.1.toLinear = α.1.toLinear := by
                    rw [← hj]
                    rfl
                  apply Weight.ext
                  intro x
                  have := LinearMap.ext_iff.mp h_eq x
                  exact this
                rw [hi_val, hj_val] at h_pairing_eq
                exact h_pairing_eq.symm
              simp only [corootSubmodule] at hm_h
              obtain ⟨h_elem, hh_elem, hh_eq⟩ := hm_h
              have h_lie_eq_smul : ⁅(h_elem : L), x_χ⁆ = (χ.toLinear) h_elem • x_χ :=
                LieAlgebra.IsKilling.lie_eq_smul_of_mem_rootSpace hx_χ h_elem
              have h_chi_h_zero : (χ.toLinear) h_elem = 0 := by
                obtain ⟨c, hc⟩ := Submodule.mem_span_singleton.mp <| by
                  rw [← LieAlgebra.IsKilling.coe_corootSpace_eq_span_singleton α.1]
                  rw [LieSubmodule.mem_toSubmodule]
                  exact hh_elem
                rw [← hc, LinearMap.map_smul]
                have h_convert : (χ.toLinear) (LieAlgebra.IsKilling.coroot α.1) =
                    χ (LieAlgebra.IsKilling.coroot α.1) := rfl
                rw [h_convert, h_chi_coroot_zero, smul_zero]
              have h_bracket_elem : ⁅x_χ, (h_elem : L)⁆ = 0 := by
                rw [← lie_skew, h_lie_eq_smul, h_chi_h_zero, zero_smul, neg_zero]
              rw [← hh_eq]
              exact h_bracket_elem

            rw [h_simplified, h_bracket_zero]
            simp

        | zero =>
          simp only [LieSubmodule.iSup_toSubmodule, Submodule.carrier_eq_coe, lie_zero,
            SetLike.mem_coe, Submodule.zero_mem]
        | add m₁ m₂ _ _ ih₁ ih₂ =>
          rw [lie_add]
          simp only [LieSubmodule.iSup_toSubmodule, Submodule.carrier_eq_coe, SetLike.mem_coe]
            at ih₁ ih₂ ⊢
          exact add_mem ih₁ ih₂
      | zero =>
        simp [zero_lie]
      | add x₁ x₂ _ _ ih₁ ih₂ =>
        rw [add_lie]
        simp only [LieSubmodule.iSup_toSubmodule, Submodule.carrier_eq_coe, SetLike.mem_coe]
          at ih₁ ih₂ ⊢
        exact add_mem ih₁ ih₂
